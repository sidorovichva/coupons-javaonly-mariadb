package Facade;

import Auxiliaries.InputAble;
import DB.ConnectionSettings;
import DB.Serialization;
import DBDAO.CompaniesDBDAO;
import DBDAO.CouponsDBDAO;
import DBDAO.CustomersDBDAO;
import DBDAO.ReportsDBDAO;
import Exceptions.Exceptions.CheckExceptionsAble;
import Exceptions.Exceptions.CouponExceptions;
import Jobs.CouponsActualization;

import java.util.*;

/**
 *  abstract facade class that provides actual facades with all mutual data and methods
 */
public abstract class ClientFacade implements InputAble, CheckExceptionsAble {

    /**
     *an inner class with bean types enums
     */
    protected enum BeanType {
        COMPANY, CUSTOMER, COUPON
    }

    /**
     *a list of menu options for each generated by crateMenu method menus
     */
    protected List<MenuOptions> menu;

    /**
     *instances of all four existing DBDAOs
     */
    protected CompaniesDBDAO companiesDBDAO;
    protected CouponsDBDAO couponDBDAO;
    protected CustomersDBDAO customersDBDAO;
    protected ReportsDBDAO reportsDBDAO;

    public ClientFacade() {
        this.menu = new ArrayList<>();
        this.companiesDBDAO = new CompaniesDBDAO();
        this.couponDBDAO = new CouponsDBDAO();
        this.customersDBDAO = new CustomersDBDAO();
        this.reportsDBDAO = new ReportsDBDAO();
    }

    public CouponsDBDAO getCouponDBDAO() {
        return couponDBDAO;
    }

    /**
     *obligatory initial menu for each facade
     */
    abstract void initialMenu();

    /**
     *directs to the corresponding case according to the user input
     */
    abstract void menuSwitcher(int choice);

    /**
     * Informs user
     * Saves current connection settings to config file
     * Stops running process
     */
    protected void exit() {
        System.out.println("Exiting...");
        Serialization.save(new ConnectionSettings(), ConnectionSettings.fileName);
        CouponsActualization.stop();
        System.exit(0);
    }

    /**
     * Builds visual user menu
     */
    protected void createMenu() {
        for (int i = 0; i < this.menu.size(); i++) {
            System.out.print((i + 1) + ". " + this.menu.get(i).getDescription() + "       ");
        }
    }

    /**
     * @param length number of entries in the menu ArrayList
     * @return a user's choice
     * checks if user made a proper choice. Force user to make choice again if the number is 0 or less or more than
     * a number of options (more than menu ArrayList length)
     */
    protected int menuChoice(int length) {
        if (check(length != 0, CouponExceptions.LIST_LENGTH_ERROR)) {
            int choice = intInput(">>>");
            if (check(choice > 0 && choice <= length, CouponExceptions.WRONG_CHOICE))
                return choice;
        }
        return menuChoice(length);
    }

    /**
     * @param type type of a "client" from BeanType enum
     * @return id number of a client
     * checks if user choose positive number or zero
     */
    public int ID(BeanType type) {
        int result = intInput("Please, enter " + type + " ID (0-back)");
        if (check(result >= 0, CouponExceptions.NEGATIVE_NUMBER)) return result;
        return ID(type);
    }
}
